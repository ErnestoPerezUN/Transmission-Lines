import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
# This code was automatically generated by chatgpt, and it is not guaranteed to be correct.
# Minor modifications were made to the code to make it work.


# Constants
c0 = 299792458  # Speed of light in vacuum (m/s)
mu0 = 4 * np.pi * 1e-7
eps0 = 1 / (mu0 * c0 ** 2)

# Grid parameters
Nz = 400          # Number of spatial steps
dz = 1e-3         # Spatial resolution (1 mm)
dt = dz / (2 * c0)  # Time step (Courant limit)
steps = 800       # Number of time steps

# Fields
Ez = np.zeros(Nz)
Hy = np.zeros(Nz)

# Material properties
eps_r = np.ones(Nz)
sigma = np.zeros(Nz)

# Add conductor from Nz//2 to end
cond_start = Nz // 2
sigma[cond_start:] = 1e3  # High conductivity region

# Update coefficients
Ca = (1 - sigma * dt / (2 * eps0 * eps_r)) / (1 + sigma * dt / (2 * eps0 * eps_r))
Cb = (dt / (eps0 * eps_r * dz)) / (1 + sigma * dt / (2 * eps0 * eps_r))

# Plotting setup
fig, ax = plt.subplots()
ax.set_xlim(0, Nz/2)
line, = ax.plot(Ez)
ax.set_ylim(-1.5, 1.5)
ax.set_xlim(0, Nz)
ax.set_title("1D FDTD: Ez field with conductor")
ax.set_xlabel("Grid index")
ax.set_ylabel("Ez Field")

def update(n):
    global Ez, Hy
    # Update magnetic field
    Hy[:-1] += (dt / (mu0 * dz)) * (Ez[1:] - Ez[:-1])
    
    # Update electric field
    Ez[1:] = Ca[1:] * Ez[1:] + Cb[1:] * (Hy[1:] - Hy[:-1])
    
    # Source: Gaussian pulse at position 50
    Ez[50] += np.exp(-0.5 * ((n - 30) / 10) ** 2)

    line.set_ydata(Ez)
    return line,

ani = FuncAnimation(fig, update, frames=steps, interval=10, blit=True)
plt.show()
